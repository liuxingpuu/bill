// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	debtFieldNames          = builder.RawFieldNames(&Debt{})
	debtRows                = strings.Join(debtFieldNames, ",")
	debtRowsExpectAutoSet   = strings.Join(stringx.Remove(debtFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	debtRowsWithPlaceHolder = strings.Join(stringx.Remove(debtFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheDebtIdPrefix = "cache:debt:id:"
)

type (
	debtModel interface {
		Insert(ctx context.Context, data *Debt) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Debt, error)
		Update(ctx context.Context, data *Debt) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDebtModel struct {
		sqlc.CachedConn
		table string
	}

	Debt struct {
		Id          int64     `db:"id"`           // 主键
		UserId      int64     `db:"user_id"`      // 用户id
		Type        string    `db:"type"`         // 负债账户类型
		DebtAmount  int64     `db:"debt_amount"`  // 负债金额
		DebtTotal   int64     `db:"debt_total"`   // 负债总金额
		Lines       int64     `db:"lines"`        // 额度
		AccountName string    `db:"account_name"` // 账户名
		PayDate     time.Time `db:"pay_date"`     // 还款日
		BillDate    time.Time `db:"bill_date"`    // 账单日
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newDebtModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDebtModel {
	return &defaultDebtModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`debt`",
	}
}

func (m *defaultDebtModel) Insert(ctx context.Context, data *Debt) (sql.Result, error) {
	debtIdKey := fmt.Sprintf("%s%v", cacheDebtIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, debtRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.DebtAmount, data.DebtTotal, data.Lines, data.AccountName, data.PayDate, data.BillDate)
	}, debtIdKey)
	return ret, err
}

func (m *defaultDebtModel) FindOne(ctx context.Context, id int64) (*Debt, error) {
	debtIdKey := fmt.Sprintf("%s%v", cacheDebtIdPrefix, id)
	var resp Debt
	err := m.QueryRowCtx(ctx, &resp, debtIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", debtRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDebtModel) Update(ctx context.Context, data *Debt) error {
	debtIdKey := fmt.Sprintf("%s%v", cacheDebtIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, debtRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.DebtAmount, data.DebtTotal, data.Lines, data.AccountName, data.PayDate, data.BillDate, data.Id)
	}, debtIdKey)
	return err
}

func (m *defaultDebtModel) Delete(ctx context.Context, id int64) error {
	debtIdKey := fmt.Sprintf("%s%v", cacheDebtIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, debtIdKey)
	return err
}

func (m *defaultDebtModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDebtIdPrefix, primary)
}

func (m *defaultDebtModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", debtRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDebtModel) tableName() string {
	return m.table
}
